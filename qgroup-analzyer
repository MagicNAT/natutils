#!/bin/bash

bkn=""
COOKIE=""

USERS_JSON_URL="http://qun.qq.com/cgi-bin/qun_mgr/search_group_members"
USERS_GET_PAYLOAD="gc=_GID_&st=0&end=1000&sort=0&bkn=$bkn"

GLIST_JSON_URL="http://qun.qq.com/cgi-bin/qun_mgr/get_group_list"
GLIST_GET_PAYLOAD="bkn=$bkn"

FRIENDLIST_JSON_URL="http://qun.qq.com/cgi-bin/qun_mgr/get_friend_list"
FRIENDLIST_PAYLOAD="bkn=$bkn"

function ProgressBar {
	let _progress=(${1}*100/${2}*100)/100
	let _done=(${_progress}*4)/10
	let _left=40-$_done
	_fill=$(printf "%${_done}s")
	_empty=$(printf "%${_left}s")
	printf "\r[*] Generating: [${_fill// /#}${_empty// /-}] ${_progress}%%"
}

# usage: listJoinedOfGroupMembers <gid> [grep_key] 
# do getAllUsers before use
function listJoinedOfGroupMembers {
	for member in $(cat group-$1.txt)
	do
		local _member=$(echo $member | awk -F"|" '{print $1}')
		[[ ! -z $_member ]] && ListJoinedGroup $_member $2
	done

}

# usage: listFriendsInGroup <gid>
# do getAllUsers, getFriend before use
function listFriendsInGroup {
	for member in $(cat group-$1.txt)
	do
		local _member=$(echo $member | awk -F"|" '{print $1}')
		[[ ! -z $_member && ! -z $(cat friends.txt | awk -F"|" '{print $1}' | grep $_member) ]] && ListJoinedGroup $_member
	done
}

# usage: getUsersList <gid>
function getUsersList {
	curl $USERS_JSON_URL --data "$(echo $USERS_GET_PAYLOAD | sed -e "s/_GID_/$1/")" -H "$COOKIE" 2> /dev/null | sed -e 's/{"card":/§{"card":/g'|tr '§' '\n'|awk -F\" '{print $33 "|" $4 "|" $22 }' | sed -e 's/|:/\|/g; s/}\,//g; s/://g; s/}\],//g; 1d;' 
}

function getGroupList {
	curl $GLIST_JSON_URL --data $GLIST_GET_PAYLOAD -H "$COOKIE" 2> /dev/null | sed 's/"gc"/§"gc"/g' | tr '§' '\n' | awk -F':' '{print $2 "|" $3}' | sed -e 's/,"gn"//g; s/","owner"//g; s/"//g; 1d;'
}

function getFriend {
	curl $FRIENDLIST_JSON_URL --data $FRIENDLIST_PAYLOAD -H "$COOKIE" 2> /dev/null | sed -e 's/,{/§,{/g;' | tr '§' '\n' | awk -F'"name":"' '{print $2}' | sed -e 's/","uin":/|/g; s/}$//g; s/}\]}}//g;' | awk -F"|" '{print $2 "|" $1}' > friends.txt
}

# getFriendGroup: do getFriend before use
function getFriendGroup {
	for friend in $(cat friends.txt)
	do
		local this_uid=$(echo $friend | awk -F"|" '{print $1}')
		[[ ! -z $this_uid ]] && ListJoinedGroup $this_uid
	done
}

function getAllUsers {
	getGroupList > groups.txt
	local groups=$(cat groups.txt)
	for group in $groups
	do
		local gid=$(echo $group|awk -F"|" '{print $1}')
		echo -n "[$(date)] Getting $group... "
		getUsersList $group > group-$gid.txt
		echo "done"
		sleep 1
	done
}

# getUsersListFromList: do getAllUsers before use
function getUsersListFromList {
	cat group-*.txt | awk -F"|" '{print $1}' | sort | uniq -d
}


# usage: findJoinedGroupByID <uid>
function findJoinedGroupByID {
	grep -lir "$1" . | grep group- | awk -F"group-|.txt" '{print $2}'
}

# getGroupNameByID: do getAllUsers before use
function getGroupNameByID {
	cat groups.txt | grep $1 | awk -F"|" '{print $2}' | sed -e 's/&nbsp;/ /g;'
}

# usage: ListJoinedGroup [uid|uname] [grep_key]
# do getAllUsers before use
function ListJoinedGroup {
	local users=$(getUsersListFromList)
	let id=0
	local total=$(getUsersListFromList|wc -l)
	[[ ! -z $1 ]] && _name=$(cat group-*.txt friends.txt 2> /dev/null | grep $1 | tail -n1 | awk -F"|" '{print $1}')
	for user in $users
	do
		let id++
		[[ -z $1 ]] && ProgressBar $id $total
		[[ -z $1 || $_name == $user ]] && {
			echo "User: $(getUsernameByID $user) ($user)" > user-$user.txt
			echo "-------------------------------------------------------------------------------" >> user-$user.txt
			local this_joined=$(findJoinedGroupByID $user) 
			for this_group in $this_joined
			do
				echo "$(getGroupNameByID $this_group) ($this_group) as $(getUsernameInGroupByID $this_group $user)" | grep -i "$2" >> user-$user.txt
			done
			echo "-------------------------------------------------------------------------------" >> user-$user.txt
			echo >> user-$user.txt
			[[ $(cat user-$user.txt | wc -l | tr -d ' ') == 4 ]] && rm user-$user.txt 
		}
	done
	[[ -z $1 ]] && cat user-*.txt || cat user-$_name.txt 2> /dev/null
}

function getUsernameByID {
	cat group-*.txt | grep $1 | tail -n1 | awk -F "|" '{print $3}' | sed -e 's/&nbsp;/ /g;'
}

function getUsernameInGroupByID {
	local name=$(cat group-$1.txt | grep $2 | awk -F "|" '{print $2}')
	[[ -z $name ]] && name=$(cat group-$1.txt | grep $2 | awk -F "|" '{print $3}')
	echo $name | sed -e 's/&nbsp;/ /g;'
}

# showCommonGroups: do ListJoinedGroup before use
function showCommonGroups {
	rm common.txt 2> /dev/null
	for user in $(ls user-*.txt)
	do
		local this_uid=$(echo $user | awk -F"user-|.txt" '{print $2}')
		echo $(getUsernameByID $this_uid) $this_uid: $(echo $(cat $user | wc -l | tr -d ' ')-4|bc) >> common.txt
	done
	cat common.txt | sort -k2nr -t":"
}

# csvExport: do getAllUsers before use
function csvExport {
	rm export.csv 2> /dev/null
	let id=0
	local total=$(getUsersListFromList|wc -l)
	local users=$(getUsersListFromList)
	for user in $users
	do
		let id++
		ProgressBar $id $total
		local this_name=$(getUsernameByID $user)
		local this_joined=$(findJoinedGroupByID $user)
		for this_group in $this_joined
		do
			local this_groupname=$(getGroupNameByID $this_group)
			local this_ingroup_nick=$(getUsernameInGroupByID $this_group $user)
			echo "$this_group,$this_groupname,$user,$this_name,$this_ingroup_nick" >> export.csv
		done
	done
}

# prologExport: do getAllUsers before use
function prologExport {
	rm export.prolog 2> /dev/null
	local users=$(getUsersListFromList)
	let id=0
	local total=$(getUsersListFromList|wc -l)
	for user in $users
	do
		let id++
		ProgressBar $id $total
		local this_joined=$(findJoinedGroupByID $user)
		for this_group in $this_joined
		do
			echo "member($this_group,$user)." >> export.prolog
		done
	done
}

# usage: listUsersJoinedAllGivenGroups <gid> <gid> [gid] [gid] ...
# do prologExport before use
# dependency: swipl
function listUsersJoinedAllGivenGroups {
	[[ -z $2 ]] && return 1;
	for grp in $*
	do
		local exec_arg="${exec_arg}member($grp,X),"
	done
	exec_arg="${exec_arg}write(X),nl,fail."
	local users=$(echo $exec_arg | swipl -s export.prolog 2> /dev/null | sed -e 's/false\.//; s/^$//g;')
	for user in $users
	do
		echo "$(getUsernameByID $user) ($user)"
	done
}

function usage {
	echo "QQ Gruop Analzyer (C) MagicNAT 2016"
	echo ""
	echo "Set your bkn and COOKIE variable in this script to continue."
	echo
	echo "You can get those variable in the POST request of the Group Management page at"
	echo "qun.qq.com."
	echo
	echo "Usages:"
	echo "listJoinedOfGroupMembers <gid>"
	echo "listFriendsInGroup <gid> (do getUsersList, getAllUsers first)"
	echo "getFriendGroup (do getFriend before use)"
	echo "ListJoinedGroup [uid|uname] (do getAllUsers first)"
	echo "showCommonGroups (do ListJoinedGroup first)"
	echo "csvExport, prologExport (do getAllUsers first)"
	echo "listUsersJoinedAllGivenGroups <gid1> <gid2> [gid3] ... [gidN] (do prologExport first, also, install swipl)"
}

[[ -z $* ]] && usage || $*
